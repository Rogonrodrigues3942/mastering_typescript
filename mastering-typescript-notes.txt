MASTERING TYPESCRIPT

Início: 28/03/2025

----------------------------------------------------------
*** Seção 2 : Configurando Ambiente ***

setting-up-environment

Aula 4 - 29/03/2025 - Instalando o VS Code

----------------------------------------------------------
29/03/2025 - Aula 5 - Conhecendo extensões úteis do VS Code

1 - Material Icon Theme;
2 - Mithril Emmet;
3 - ESLint
4 - Better Comments
5 - GitLens — Git supercharged
6 - Tabnine: AI Chat & Autocomplete for JavaScript (Não instalada)


----------------------------------------------------------
29/03/2025 - Aula 6 - Instalando o Node.js

Já tenho instalado.
Minha versão: 20.15.1

----------------------------------------------------------

xx/xx/2025 - Aula 7 - Instalando o Git

git version 2.45.2.windows.1 - Já tinha instalado

----------------------------------------------------------

xx/xx/2025 - Aula 8 - Instalando o TypeScript e criando primeiro código

Estava instalado: Version 5.7.3

1 - Instalando o typescript via terminal:

$ npm i -g typescript


2 - Verificando a versão do TS:

$ tsc --version


3 - Instalando a versão do curso:

$ npm install -g typescript@4.1.3
 

4 - Compilando o primeiro arquivo TS, via terminal:

$ tsc primeiro_codigo.ts 
----------------------------------------------------------

30/03/2025 - Aula 9 - Compilando o TypesScript para versões diferentes

Trabalhando com versões antigas do EcmaScript3.


Alteração a versão do ES:

Configurando o EcmaScript via terminal. Via terminal.


Aplicando o init para sobrescrever o tsconfig.json

$ tsc --init

----------------------------------------------------------

30/03/2025 - Aula 10 - entendo o compilador TypeScript 

Rever a aula, importante por que configura o arquivo tsconfig.json.

----------------------------------------------------------


----------------------------------------------------------
*** Seção 3: Conhecendo os Tipos ***

30/03/2025 - Aula 11 - conhecendo os tipos do TypeScript

----------------------------------------------------------
31/03/2025 - Aula 12 - Dedução de Tipo (Type Inference)

----------------------------------------------------------
31/03/2025 - Aula 13 - String

----------------------------------------------------------

01/04/2025 - Aula 14 -Number


----------------------------------------------------------

01/04/2025 - Aula 15 - Union Types

----------------------------------------------------------

01/04/2025 - Aula 16 - Boolean

----------------------------------------------------------

01/04/2025 - Aula 17 - Array

rever aula.

----------------------------------------------------------

02/04/2025 - Aula 18 - Tuple

Tuple: é um array com os tipos de dados definidos e com quantidade determinada.

Uma tupla é uma estrutura de dados imutável. Isso significa que, uma vez criada, seus elementos não podem ser alterados, adicionados ou removidos.


----------------------------------------------------------

02/04/2025 - Aula 19 - Object

Objeto: armazena valores com a característica chave/valor.

----------------------------------------------------------
07/04/2025 - Aula 20 - Enum

ASSISTIDA: 07/04/2025
EXERCÍCIO: 07/04/2025

Em TypeScript, um enum (abreviação de enumeration) é uma forma simples de criar um conjunto de nomes com valores fixos. Ele ajuda você a dar nomes mais claros para valores que normalmente seriam números ou strings.

----------------------------------------------------------

08/04/2025 - Aula 21 - Null and Undefined


ASSISTIDA: 08/04/2025
EXERCÍCIO: 08/04/2025


----------------------------------------------------------

08/04/2025 - Aula 22 - Any

ASSISTIDA: 08/04/2025
EXERCÍCIO: 08/04/2025


Suporta qualquer tipo de dado. 
----------------------------------------------------------

15/04/2025 - Aula 23 - Unknown

Tipo desconhecido (unknown).

Usar quando não saberá o retorno de uma massa de dados. Por exemplo a integração com uma API.

ASSISTIDA: 15/04/2025
EXERCÍCIO: 15/04/2025

O tipo unknown não pode ser atribuído diretamente a outro tipo (como number), porque ele é "desconhecido". O TypeScript quer ter certeza que você verificou ou confirmou o tipo antes de usar — diferente do any, que deixa passar mesmo que esteja errado.

----------------------------------------------------------
17/04/2025 - Aula 24 - Void

ASSISTIDA: 17/04/2025
EXERCÍCIO: 17/04/2025

Void é usado para funções, mas não retorno dados. Aplicar em funções que são criadas pelo usuário.
----------------------------------------------------------

17/04/2025 - Aula 25 - Never

ASSISTIDA: 17/04/2025
EXERCÍCIO: 17/04/2025


----------------------------------------------------------

18/04/2025 - Aula 26 - Afirmações de Tipos

ASSISTIDA: 18/04/2025
EXERCÍCIO: 18/04/2025


*** Fim da seção 3 18/04/2025
----------------------------------------------------------
*** Seção 4: Funções TypeScript ***

19/04/2025 - Aula 27 - Tipagem nos parâmetros e retorno de funções

ASSISTIDA: 19/04/2025
EXERCÍCIO: 19/04/2025

----------------------------------------------------------

19/04/2025 - Aula 28 - Parâmetros com valor padrão ou opcional

ASSISTIDA: 19/04/2025
EXERCÍCIO: 19/04/2025

----------------------------------------------------------
19/04/2025 - Aula 29 - Rest Parameters

ASSISTIDA: 19/04/2025
EXERCÍCIO: 19/04/2025

*** Fim da seção 4 - 19/04/2025
----------------------------------------------------------

*** Seção 5: Interfaces ***

23/04/2025 - Aula 30 - O que é uma interface e como criá-la.

ASSISTIDA: 23/04/2025
EXERCÍCIO: 25/04/2025

O que é uma interface em TypeScript?
Interface é como um molde ou modelo que define como um objeto deve ser.

- Interface ajuda a:

a. Organizar o código

b. Evitar erros

c. Tornar seu projeto mais fácil de entender

Cria-se um padrão e obriga a seguir o padrão.

----------------------------------------------------------
25/04/2025 - Aula 31 - Propriedades opcionais.

Deteminar uma propriedade como opcional. 

Para torna a propriedade opcional, insira o ponto de interrogação após nome da propriedade: "nome_propriedade? : valor". 

Exemplo: 

interface IEndereco{

    logradouro: string;
    numero?: number;
    bairro: string;
    cidade: string;

}


Observe que a propriedade numero se tornou opcional, que pode ou não ser declarada.

ASSISTIDA: 25/04/2025
EXERCÍCIO: 25/04/2025

----------------------------------------------------------
25/04/2025 - Aula 32 - Propriedades readonly.

ASSISTIDA: 25/04/2025
EXERCÍCIO: 25/04/2025

----------------------------------------------------------
26/04/2025 - Aula 33 - Funções em interfaces.

ASSISTIDA: 26/04/2025
EXERCÍCIO: 26/04/2025

Só sabem pedir estrelinhas. Dá o curso! Se o curso que eu estudo for legal, o avaliarei bem e mais indico para fazer para amigos e colegas. Muito chato! Não tem uma aula sem pedir estrelas.

----------------------------------------------------------
26/04/2025 - Aula 34 - Arrays em interfaces.

ASSISTIDA: 05/05/2025
EXERCÍCIO: 05/05/2025

----------------------------------------------------------
05/05/2025 - Aula 35 - Estendendo interfaces

ASSISTIDA: 05/05/2025
EXERCÍCIO: 06/05/2025


*** Fim da seção 5 - 06/05/2025.
----------------------------------------------------------
*** Seção 6: Orientação a Objetos ***

12/05/2025 - Aula 36 -  O que é a POO (Programação Orientada a Objetos)

ASSISTIDA: 12/05/2025
EXERCÍCIO: 12/05/2025

Programação orientada a objetos, sem baseia construir códigos utilizando elementos do mundo real como base; abstraindo características e ações do objeto utilizado como base.

Características => atributos
Ações => métodos

Classe é um conjunto de atributos e métodos que constituem uma classe.

Um objeto é uma instância de uma classe.

Encapsulamento -> criar uma proteção, controlando como acessar um objeto.

Polimorfismo -> duas ações com mesmo, recebendo parâmetros e ações diferentes 

Abstração -> abstrair estrutura de uma classe (modelo), isso não torna uma classe mas, ela serve de mmodelo para outras classe que derivam da abstração.


----------------------------------------------------------
13/05/2025 - Aula 37 - Criando a primeira classe.

ASSISTIDA: 13/05/2025
EXERCÍCIO: xx/xx/2025

palavra reservada: class

Nomes de classes devem começar com caixa alta, letra maiúscula.

Classes são formadas por: atributos e métodos.

Atributos são semelhantes a variáveis.

Métodos são semelhantes a métodos.

Tem constructor, deve ser declarado como método constructor, para inicializar os atributos.

----------------------------------------------------------

15/05/2025 - Aula 38 - Criando métodos.

ASSISTIDA: 15/05
/2025 - 
EXERCÍCIO: xx/xx/2025

----------------------------------------------------------

22/05/2025 - Aula 39 - Herança.

Definição:

O conceito de herança permite que uma classe herde recursos de outra classe.

A classe que compartilha seus recursos, é denominada classe pai.

A classe que herda os recursos de outra classe, é denominada classe filha.

Usar a palavra reservada "extends" para classe filha se torna herdeira da classe pai.

O constructor da classe filha precisa ter a invocação da classe pai com método "super(params)".

O método "super()" deve ser invocado antes dos parâmetros da classe filha. Não esqueca declarar os atributos da classe pai nos métodos "constructor" e "super"!

Na instância de novos objetos deve-se declarar todos os parâmetros.

ASSISTIDA: 22/05/2025
EXERCÍCIO: 29/05/2025

----------------------------------------------------------

30/05/2025 - Aula 40 - Encapsulamento public.

ASSISTIDA: 30/05/2025
EXERCÍCIO: 31/05/2025

Permiti diferentes níveis de acessos para atributos e métodos de uma classe. Para manipular os elementos de uma classe, são utilizados modificadores de acesso (getters e setters).

O encapsulamento proteja e mantém a integridade das informações.


Níves de acesso;

- public;
- protected; (somente a classe e seus elementos acessam os atributos e métodos e seus herdeiros.)
- private; (somente o escopo da classe e seus elementos acessam os atributos e métodos)
- readonly ( Leitura de somente dos atributos e não tem acesso ao métodos);

----------------------------------------------------------

31/05/2025 - Aula 41 - Encapsulamento protected.

ASSISTIDA: 31/05/2025
EXERCÍCIO: 31/05/2025

Rever a aula. ****

----------------------------------------------------------

02/06/2025 - Aula 42 - Encapsulamento private.

ASSISTIDA: 02/06/2025
EXERCÍCIO: 05/06/2025

SuiteScript Applications


----------------------------------------------------------

19/06/2025 - Aula 43 - Encapsulamento - Private no TypeScript x ECMAScript.

ASSISTIDA: 19/06/2025
EXERCÍCIO: 20/06/2025

Estudar no EcmaScript o meio de acesso private.




----------------------------------------------------------

23/06/2025 - Aula 44 - Private x Readonly.

ASSISTIDA: 23/06/2025
EXERCÍCIO: 23/06/2025

----------------------------------------------------------

23/06/2025 - Aula 45 - Simplificando método construtor.

ASSISTIDA: 23/06/2025
EXERCÍCIO: 23/06/2025

----------------------------------------------------------

03/07/2025 - Aula 46 - Métodos getters e setters.

ASSISTIDA: 04/07/2025
EXERCÍCIO: 04/07/2025

----------------------------------------------------------

06/07/2025 - Aula 47 - Propriedades e métodos estáticos. 

ASSISTIDA: 06/07/2025
EXERCÍCIO: 06/07/2025
REVISTA:
----------------------------------------------------------

08/07/2025 - Aula 48 -  Polimorfismo

ASSISTIDA: 08/07/2025
EXERCÍCIO: 08/07/2025
REVISTA: 10/07/2025
----------------------------------------------------------

10/07/2025 - Aula 49 - Classes abstratas

ASSISTIDA: 10/07/2025
EXERCÍCIO: 14/07/2025

A classe abstrata não pode ser instanciada. Mas pode implementá-la, utilizando suas propriedades e métodos.

----------------------------------------------------------

18/07/2025 - Aula 50 - Implementando interface em uma classe.

ASSISTIDA: 18/07/2025
EXERCÍCIO: 19/07/2025

Revisar a seção 5 - Interfaces
----------------------------------------------------------


*** Fim da seção 6 - 19/07/2025
----------------------------------------------------------
*** Seção 7: Módulos ***

19/07/2025 - Aula 51 - O que é um módulo

ASSISTIDA: xx/xx/2025
EXERCÍCIO: xx/xx/2025

----------------------------------------------------------

21/07/2025 - Aula 52 - Exportando e Importando módulos

ASSISTIDA: 21/07/2025
EXERCÍCIO: 22/07/2025

Somente teórico.

----------------------------------------------------------

23/07/2025 - Aula 53 - Realizando export com valor padrão export

ASSISTIDA: 23/07/2025
EXERCÍCIO: xx/xx/2025

Obs: 

1 - reforçar conceitos de módulos. Revisar o módulo. ****

2 - Estudar como importar e exportar módulos. ***


*** Fim da Seção 7: Módulos - xx/xx/ 2025 ***

----------------------------------------------------------
*** Seção 8: Namespaces ***

03/08/2025 - Aula 54 - O que é namespace

ASSISTIDA: 03/08/2025
EXERCÍCIO: 03/08/2025

Um namespaces é uma forma de agrupar códigos relacionados em um único "espaço de nomes" (diretório), evitando conflitos de nomes no projeto.

Aula teórica.

----------------------------------------------------------

03/08/2025 - Aula 55 - Criando namespaces

ASSISTIDA: 03/08/2025
EXERCÍCIO: 04/08/2025

Preste atenção a aula inteira com o exemplo de como transpilar o arquivo namespace.

Criando um sistema de autenticação:

1 - Criando um diretório, nomea-lo como "autenticacao";

2 - Criar um arquivo, nomea-lo como "index.ts". Inserir todos os elmentos do "namespace";

3 - Declarar as classes responsáveis por login, registro e recuperação;

4 - Implantar interfaces para utiliza-los na tipificação dos parâmetros;

5 - Interface estando relacionada com o namespace, deve ser declarada no escopo;

6 - No diretório principal (scripts, também utilizado no "rootDir"), criar o arquivo "autenticacao.ts";

7 - Relizar a compilação do ts com o arquivo de entrada e saída: 

'tsc scripts/autenticacao.ts --outFile output/autenticacao.js'

Atenção invoque o arquivo no diretório "output"




*** Fim da Seção 8: Namespaces - xx/xx/2025***
----------------------------------------------------------
*** Seção 9: Mixins ***

🔹 O que é um mixin?

Um mixin é um padrão de programação usado para reaproveitar código em várias classes sem precisar de herança múltipla.


👉 Em outras palavras:
É como uma “caixinha de funcionalidades” que você pode misturar dentro de diferentes classes.


📌 Onde faz sentido usar?

Quando você tem funcionalidades comuns que podem aparecer em classes diferentes.

Exemplo:

Loggable (adiciona logs)

Serializable (transforma objeto em JSON)

Comparable (adiciona comparação entre objetos)


🎯 Resumo

Um mixin é uma forma de compartilhar código entre classes sem precisar usar herança múltipla.
Ele “mistura” funcionalidades extras em uma classe existente.



----------------------------------------------------------
*** Seção 10: Generics ***

----------------------------------------------------------
*** Seção 11: Decorators ***

----------------------------------------------------------
*** Seção 12: Projeto - Calculadora com TypeScript ***

----------------------------------------------------------
